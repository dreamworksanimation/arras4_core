// Copyright 2023-2024 DreamWorks Animation LLC and Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#ifndef REZ_CONTEXT_H_
#define REZ_CONTEXT_H_

#include "Process.h"

#include <message_api/UUID.h>

#include <string>
#include <memory>
#include <vector>

namespace arras4 {
    namespace impl {

class ProcessManager;
class SimpleIoCapture;
class Environment;

// Allows you to run a program in a REZ context. The context can be specified as a list of packages, a
// pre-resolved context string (from rez-config --print-env (rez1) or rez-env --output (rez2), or a pre-resolved
// context stored in a file. You call ONE of 
//           - setPackages
//           - setContext
//           - setContextFile
// to set this up. Calling setPackages causes RezContext to immediately run a rez-config or rez-env process to resolve
// the context to a string, which is then stored in a temporary file. If you use setContext, the string you supply is
// similarly stored in a temp file. So in all cases, the context that will be used is pre-resolved and written to disk
//
// All the setup functions return "false" if an error occurs, and fill in their "error" string argument. setPackages
// also requires a ProcessManager because it spawns a child process to perform context resolution.
//
// After setup, call the wrap() function, passing in SpawnArgs describing the program you want to run. RezContext
// will generate a new set of SpawnArgs that will, when used, run the program under the set up context. You can
// use the same SpawnArgs as input and output, in which case it will be modified in place.
// 
// When you use a package list or string context, RezContext creates a temporary file. This cannot be deleted until
// you have actually finished running the wrapped program. Therefore it is not automatically removed when RezContext
// destructs : if you want to clean up you have to do it yourself, using the value returned by getContextFile(),
class RezContext
{
public:
    // throws std::runtime_error.
    // majorVersion is 1 for rez 1 and 2 for rez 2 : the exact version is selected by RezContext
    // id/sessionId can be process and session ids as used by ProcessManager : they are required by this class
    // only to make sure that the generated temporary file is unique and to use Arras logging, and so they can
    // in practice be almost anything.
    //
    // if omitDefaultPackagePath is false, packagePathPrefix is prepended to the required default package path
    // omitDefaultPackagePath=true causes the required default path to be omitted, so that packagePathPrefix is
    // the full path used.
    RezContext(const std::string& name,
               unsigned majorVersion,
               const std::string& packagePathPrefix="",  
	       bool omitDefaultPackagePath = false,
	       const std::string& pseudoCompiler="",
               const api::UUID& id = api::UUID(),         // for uniqueness
               const api::UUID& sessionId = api::UUID()); // for logging;

    ~RezContext();

    // call just one of these to set up the context
    bool setPackages(ProcessManager& procMan,
                     const std::string& packages,
                     std::string& error);
    bool setContext(const std::string& context,
                    std::string& error);
    bool setContextFile(const std::string& filepath,
                        std::string& error);

    // get the context file path. Mainly useful if it was autogenerated by setContext or setPackages
    const std::string& getContextFile();

    // call this to wrap a command so that it runs in the context
    // in and out may be the same object
    bool wrap(const SpawnArgs& in, SpawnArgs& out);

    // lower level access to the packages resolver
    std::string resolvePackages(ProcessManager& procMan,
				const std::string& packages,
				std::string& error);
private:
   
    // get environment required to run Rez
    void getRezEnvironment(Environment& env) const;
    // get environment required to run a backed bash script
    void getBashEnvironment(Environment& env) const;
    // basic package resolution function
    bool doPackageResolve(ProcessManager& procMan,
			  const std::string& packages,
			  std::string& error);

    std::string mName;          // used for process and file names
    api::UUID mId;              // used to make them unique
    api::UUID mSessionId;       // used when logging

    unsigned mMajorVersion;     // 1 or 2
    std::string mVersion;       // e.g. "1.0.7" or "2.23.1"
    std::string mPackagesPath;  // prefix plus standard DWA packages path
    std::string mRezDir;        // root of rez, e.g. /rel/third_party/rez/1.0.7
    std::string mBinDir;        // location on binaries, inside mRezDir
    std::string mPseudoCompiler; // required for rez1

    std::shared_ptr<SimpleIoCapture> mIoCapture;
                                // used to capture output from rez-config/rez-env

    std::string mContextFilePath; // path of a file holding resolved context
};

}
}
#endif
